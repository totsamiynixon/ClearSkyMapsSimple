// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Web.Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190515100444_IdetityChanges")]
    partial class IdetityChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Web.Data.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("IPAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.ToTable("Sensors");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Sensor");
                });

            modelBuilder.Entity("Web.Data.Models.StaticSensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("CH4");

                    b.Property<float>("CO");

                    b.Property<float>("CO2");

                    b.Property<DateTime>("Created");

                    b.Property<float>("Dust");

                    b.Property<float>("Hum");

                    b.Property<float>("LPG");

                    b.Property<float>("Preassure");

                    b.Property<int>("StaticSensorId");

                    b.Property<float>("Temp");

                    b.HasKey("Id");

                    b.HasIndex("StaticSensorId");

                    b.ToTable("StaticSensorReadings");
                });

            modelBuilder.Entity("Web.Data.Models.PortableSensor", b =>
                {
                    b.HasBaseType("Web.Data.Models.Sensor");

                    b.HasDiscriminator().HasValue("PortableSensor");
                });

            modelBuilder.Entity("Web.Data.Models.StaticSensor", b =>
                {
                    b.HasBaseType("Web.Data.Models.Sensor");

                    b.Property<bool>("IsVisible");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.HasDiscriminator().HasValue("StaticSensor");
                });

            modelBuilder.Entity("Web.Data.Models.StaticSensorReading", b =>
                {
                    b.HasOne("Web.Data.Models.StaticSensor", "StaticSensor")
                        .WithMany("Readings")
                        .HasForeignKey("StaticSensorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
